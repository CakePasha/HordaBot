import logging
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, Update
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
from datetime import datetime

from dotenv import load_dotenv
import os

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))


bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('users.db')
cursor = conn.cursor()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É discount, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
try:
    cursor.execute("ALTER TABLE users ADD COLUMN discount REAL DEFAULT 0.0")
    conn.commit()
except sqlite3.OperationalError:
    # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    pass

# –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        referrer_id INTEGER,
        referrals_count INTEGER DEFAULT 0,
        discount REAL DEFAULT 0.0
    )
""")
conn.commit()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
last_command_time = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∫–æ–º–∞–Ω–¥
async def throttle_command(user_id: int, command: str, rate: int = 2):
    now = datetime.now()
    if user_id in last_command_time:
        last_time = last_command_time[user_id].get(command)
        if last_time and (now - last_time).total_seconds() < rate:
            return False
    last_command_time.setdefault(user_id, {})[command] = now
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
def add_user(user_id, username, referrer_id=None):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone():
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä
    if referrer_id:
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (referrer_id,))
        if not cursor.fetchone():
            logging.warning(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID {referrer_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞.")
            referrer_id = None

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("INSERT INTO users (user_id, username, referrer_id) VALUES (?, ?, ?)", 
                   (user_id, username, referrer_id))
    conn.commit()
    logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, —Ä–µ—Ñ–µ—Ä–µ—Ä: {referrer_id}")

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    if referrer_id:
        logging.info(f"–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞: {referrer_id}")
        update_referrals_count(referrer_id)
        update_discount_and_notify(referrer_id)

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
def update_referrals_count(user_id):
    cursor.execute("UPDATE users SET referrals_count = referrals_count + 1 WHERE user_id = ?", (user_id,))
    conn.commit()
    logging.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
def update_discount_and_notify(user_id):
    cursor.execute("SELECT referrals_count FROM users WHERE user_id = ?", (user_id,))
    referrals_count = cursor.fetchone()[0]
    discount = min(referrals_count * 2, 50)  # 2% –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –º–∞–∫—Å–∏–º—É–º 50%
    cursor.execute("UPDATE users SET discount = ? WHERE user_id = ?", (discount, user_id))
    conn.commit()
    logging.info(f"–°–∫–∏–¥–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {discount}%")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    asyncio.create_task(bot.send_message(
        user_id,
        f"üéâ *You have +1 new referral!*\n"
        f"*Your discount has been increased by 2%.*\n"
        f"*Current discount: {discount}%.*",
        parse_mode="Markdown"
    ))

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (Reply-–∫–Ω–æ–ø–∫–∏)
def main_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ My Profile"), KeyboardButton(text="üõí Catalog ")],
            [KeyboardButton(text="‚ÑπÔ∏è About Us"), KeyboardButton(text="üéÅ Referral System")],
            [KeyboardButton(text="üí¨ Help & Support"), KeyboardButton(text="üëÄ Soon...")]
        ],
        resize_keyboard=True,  # –£–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    )
    return keyboard

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    return user_id == ADMIN_ID

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(Command(commands=["users"]))
async def handle_users(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ You don't have permission to use this command.")
        return

    cursor.execute("SELECT user_id, username, referrals_count, discount FROM users")
    users = cursor.fetchall()

    if not users:
        await message.answer("No users found in the database.")
        return

    response = "üë• *List of Users:*\n\n"
    for user in users:
        user_id, username, referrals_count, discount = user
        response += (
            f"üÜî *User ID:* `{user_id}`\n"
            f"üë§ *Username:* {username or 'N/A'}\n"
            f"üë• *Referrals:* {referrals_count}\n"
            f"üí∏ *Discount:* {discount}%\n\n"
        )

    await message.answer(response, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Command(commands=["user"]))
async def handle_user(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ You don't have permission to use this command.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ user_id
    args = message.text.split()
    if len(args) < 2:
        await message.answer("Usage: `/user <user_id>`", parse_mode="Markdown")
        return

    try:
        user_id = int(args[1])
    except ValueError:
        await message.answer("Invalid user ID. Please provide a valid number.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT user_id, username, referrals_count, discount FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()

    if not user:
        await message.answer(f"No user found with ID `{user_id}`.", parse_mode="Markdown")
        return

    user_id, username, referrals_count, discount = user
    response = (
        f"üë§ *User Profile:*\n\n"
        f"üÜî *User ID:* `{user_id}`\n"
        f"üë§ *Username:* {username or 'N/A'}\n"
        f"üë• *Referrals:* {referrals_count}\n"
        f"üí∏ *Discount:* {discount}%\n"
    )

    await message.answer(response, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö
@dp.message(Command(commands=["userstat"]))
async def handle_userstat(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ You don't have permission to use this command.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ username
    args = message.text.split()
    if len(args) < 2:
        await message.answer("Usage: `/userstat @username`", parse_mode="Markdown")
        return

    username = args[1].lstrip("@")  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª @, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT user_id, username, referrals_count, discount FROM users WHERE username = ?", (username,))
    user = cursor.fetchone()

    if not user:
        await message.answer(f"No user found with username `@{username}`.", parse_mode="Markdown")
        return

    user_id, username, referrals_count, discount = user

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("SELECT username, user_id FROM users WHERE referrer_id = ?", (user_id,))
    invited_users = cursor.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö
    if invited_users:
        invited_list = "\n".join([f"üë§ @{invited[0] or 'N/A'} (ID: `{invited[1]}`)" for invited in invited_users])
    else:
        invited_list = "No invited users."

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = (
        f"üë§ *User Profile:*\n\n"
        f"üÜî *User ID:* `{user_id}`\n"
        f"üë§ *Username:* @{username}\n"
        f"üë• *Referrals:* {referrals_count}\n"
        f"üí∏ *Discount:* {discount}%\n\n"
        f"üìã *Invited Users:*\n{invited_list}"
    )

    await message.answer(response, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Command(commands=["delete_user"]))
async def delete_user(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ You don't have permission to use this command.")
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("Usage: `/delete_user <user_id>`", parse_mode="Markdown")
        return

    try:
        user_id = int(args[1])
        cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
        conn.commit()
        await message.answer(f"User with ID `{user_id}` has been deleted.", parse_mode="Markdown")
    except ValueError:
        await message.answer("Invalid user ID. Please provide a valid number.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ —Å–∫–∏–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.message(Command(commands=["give_discount"]))
async def handle_give_discount(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ You don't have permission to use this command.")
        return

    args = message.text.split()
    if len(args) < 3:
        await message.answer("Usage: `/give_discount @username <discount>`", parse_mode="Markdown")
        return

    try:
        username = args[1].lstrip("@")  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª @, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        discount_to_add = float(args[2])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute("SELECT user_id, discount FROM users WHERE username = ?", (username,))
        user = cursor.fetchone()
        if not user:
            await message.answer(f"User with username `@{username}` not found.", parse_mode="Markdown")
            return

        user_id, current_discount = user
        new_discount = current_discount + discount_to_add

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–∏–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("UPDATE users SET discount = ? WHERE user_id = ?", (new_discount, user_id))
        conn.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–π —Å–∫–∏–¥–∫–µ
        await bot.send_message(
            user_id,
            f"üéâ* You have received a bonus discount: {discount_to_add:.2f}%*\n"
            f"*–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: {new_discount:.2f}%.*",
            parse_mode="Markdown"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        await message.answer(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å username `@{username}` —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞: {discount_to_add:.2f}%.\n"
            f"–ù–æ–≤–∞—è —Å–∫–∏–¥–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_discount:.2f}%.",
            parse_mode="Markdown"
        )

    except ValueError:
        await message.answer("Invalid input. Please provide a valid username and discount amount.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Command(commands=["remove_discount"]))
async def handle_remove_discount(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ You don't have permission to use this command.")
        return

    args = message.text.split()
    if len(args) < 3:
        await message.answer("Usage: `/remove_discount @username <discount>`", parse_mode="Markdown")
        return

    try:
        username = args[1].lstrip("@")  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª @, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        discount_to_remove = float(args[2])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute("SELECT user_id, discount FROM users WHERE username = ?", (username,))
        user = cursor.fetchone()
        if not user:
            await message.answer(f"User with username `@{username}` not found.", parse_mode="Markdown")
            return

        user_id, current_discount = user
        new_discount = max(current_discount - discount_to_remove, 0)  # –°–∫–∏–¥–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–∏–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("UPDATE users SET discount = ? WHERE user_id = ?", (new_discount, user_id))
        conn.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–∫–∏–¥–∫–∏
        await bot.send_message(
            user_id,
            f"‚ùå *Your discount has been decreased on: {discount_to_remove:.2f}%*\n"
            f"*Your current discount: {new_discount:.2f}% ‚≠ê*",
        parse_mode="Markdown")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        await message.answer(
            f"–°–∫–∏–¥–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å username `@{username}` —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ {discount_to_remove:.2f}%.\n"
            f"–ù–æ–≤–∞—è —Å–∫–∏–¥–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_discount:.2f}%.",
            parse_mode="Markdown"
        )

    except ValueError:
        await message.answer("Invalid input. Please provide a valid username and discount amount.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ –ø–æ username
@dp.message(Command(commands=["register_purchase"]))
async def handle_register_purchase(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ You don't have permission to use this command.")
        return

    args = message.text.split()
    if len(args) < 3:
        await message.answer("Usage: `/register_purchase @username <amount>`", parse_mode="Markdown")
        return

    try:
        username = args[1].lstrip("@")  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª @, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        amount = float(args[2])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute("SELECT user_id, referrer_id FROM users WHERE username = ?", (username,))
        user = cursor.fetchone()
        if not user:
            await message.answer(f"User with username `@{username}` not found.", parse_mode="Markdown")
            return

        user_id, referrer_id = user

        # –ù–∞—á–∏—Å–ª—è–µ–º —Å–∫–∏–¥–∫—É —Ä–µ—Ñ–µ—Ä–µ—Ä—É, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if referrer_id:
            discount = 10  # 10% –∑–∞ –ø–æ–∫—É–ø–∫—É
            cursor.execute("SELECT discount FROM users WHERE user_id = ?", (referrer_id,))
            referrer_discount = cursor.fetchone()[0]
            new_discount = referrer_discount + discount

            cursor.execute("UPDATE users SET discount = ? WHERE user_id = ?", (new_discount, referrer_id))
            conn.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            await bot.send_message(
                referrer_id,
                f"*üéâ The user you invited made a purchase!*\n"
                f"*You've received a discount: {discount}%.*\n"
                f"*Current discount: {new_discount}%.*",
                parse_mode="Markdown"
            )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await message.answer(
            f"Purchase by user `@{username}` for the amount `{amount}` has been successfully registered.",
            parse_mode="Markdown"
        )

    except ValueError:
        await message.answer("Invalid input. Please provide a valid username and amount.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command(commands=["start"]))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    referrer_id = None

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    if not await throttle_command(user_id, "start", rate=2):
        await message.answer("‚è≥ Please wait before using this command again.")
        return

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç /start –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    if len(message.text.split()) > 1:
        referrer_id = int(message.text.split()[1])
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç {referrer_id}")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_user(user_id, username, referrer_id)

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ —Ç–µ–∫—Å—Ç–æ–º
    photo_url = "https://i.imgur.com/lnr4Z0M.jpeg" 
    user_name = message.from_user.first_name
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo_url,
        caption=(
            f"Hello, *{user_name}*! \nWelcome to *Horda Shop*! üéâ\n\n"
            "*üí´ Tap the menu below to snoop around.*\n"
            "*Deals don‚Äôt bite, but they do disappearü´• ‚Äî so don‚Äôt blink...*\n\n\n"
            "*ü™¥Our News Channel:* [@HORDAHORDA]"
        ),
        parse_mode="Markdown",
        reply_markup=main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Your Profile"
@dp.message(F.text == "üë§ My Profile")
async def handle_profile(message: Message):
    user_id = message.from_user.id
    cursor.execute("SELECT referrals_count, discount FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()

    if result:
        referrals_count, discount = result
        await message.answer(
            f"*üë§ Your Profile*\n\n"
            f"*üë• Referrals: *{referrals_count}\n"
            f"*-You've referred {referrals_count} friends! Keep it up!*\n\n"
            f"*üí∏ Discount: *{discount:.2f}%\n"
            f"*- Active discount for you!*",
        parse_mode="Markdown")
    else:
        await message.answer("You are not registered in the system yet.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Assortiment"
@dp.message(F.text == "üõí Catalog")
async def handle_assortiment(message: Message):                              
    await message.answer(
        "Choose a category:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üéß Spotify Premium"), KeyboardButton(text="üî¥ YouTube Premium")],
                [KeyboardButton(text="üü£ Twitch Subscription"), KeyboardButton(text="üíé Discord Nitro")],
                [KeyboardButton(text="‚≠ê Telegram Stars"), KeyboardButton(text="Turkish Bankcards üáπüá∑")],
                                            [KeyboardButton(text="Back")]
            ],
            resize_keyboard=True
        )
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Spotify, YouTube Premium –∏ Twitch Prime
@dp.message(F.text == "üéß Spotify Premium")
async def handle_spotify(message: Message):
    await message.answer(
        "üéµ *Spotify Premium Individual*\n\n"
        "‚ñ´Ô∏è* 1 month ‚Äî $3.99*\n\n"
        "‚ñ´Ô∏è* 3 months ‚Äî $8.99*\n\n"
        "‚ñ´Ô∏è *6 months ‚Äî $12.99*\n\n"
        "*‚ñ´Ô∏è 12 months ‚Äî $22.99* \n\n"
        "*Payment methods:\nü™ôCrypto\nüí∏PayPal*\n\n"
        "*To buy: @headphony*",
    parse_mode="Markdown")

@dp.message(F.text == "üî¥ YouTube Premium")
async def handle_youtube(message: Message):
    await message.answer(
        "soon..."
    )

@dp.message(F.text == "üü£ Twitch Subscription")
async def handle_twitch(message: Message):
    await message.answer(
        "*üéÆ Twitch Subscription*\n"
        "*LEVEL 1‚úÖ\n\n*"
        "*‚ñ´Ô∏è Level 1 ‚Äî 1 Month ‚Äî $3.99*\n\n"
        "*‚ñ´Ô∏è Level 1 ‚Äî 3 Months ‚Äî $8.99*\n\n"
        "*‚ñ´Ô∏è Level 1 ‚Äî 6 Months ‚Äî $17.99*\n\n"
        "*LEVEL 2‚úÖ\n\n*"
        "*‚ñ´Ô∏è Level 2 ‚Äî 1 Month ‚Äî $5.99*\n\n"
        "*LEVEL 3‚úÖ\n\n*"
        "*‚ñ´Ô∏è Level 3 ‚Äî 1 Month ‚Äî $14.99*\n\n"
        "ü•∞No account access needed ‚Äî just *your* and the *streamer‚Äôs* *nicknames!*\n\n"
        "*Payment methods:\n- Crypto\n- PayPal*\n\n"
        "*To buy: @heaphony*",
        
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Turkish Bankcards"
@dp.message(F.text == "Turkish Bankcards üáπüá∑")
async def handle_turkish_bankcards(message: Message):
    await message.answer(
        "Choose a card type:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="Popypara üáπüá∑")],
                [KeyboardButton(text="Back")]
            ],
            resize_keyboard=True
        )
    )

@dp.message(F.text == "üíé Discord Nitro")
async def handle_discord(message: Message):
    await message.answer(
        "üíé *Discord Nitro Full*\n\n"
        "*1 month ‚Äî $6.49*\n\n"
        "*3 months ‚Äî $13.99*\n\n"
        "*6 months ‚Äî soon...*\n\n"
        "*üéÅ You'll get Nitro as a gift ‚Äî no need to log in anywhere, no data required!*\n\n"
        "*‚öúÔ∏è You'll only have to activate it with VPN and that's it!*\n\n"
        "*Payment methods:\n- Crypto (TON, BTC, USDC, BNB)\n- PayPal*\n\n"
        "*To buy: @headphony*",
        parse_mode="Markdown"
    )

@dp.message(F.text == "‚≠ê Telegram Stars")
async def handle_telegram_stars(message: Message):
    await message.answer(
        "*‚≠ê Telegram Stars*\n\n"
        "*100‚≠ê ‚Äî $1.79*\n\n"
        "*250‚≠ê ‚Äî $4.59*\n\n"
        "*500‚≠ê ‚Äî $8.99*\n\n"
        "*1000‚≠ê ‚Äî $16.99*\n\n"
        "*üì¶ All stars are purchased officially and delivered via Telegram!*\n\n"
        "‚úÖ No account info, no logins ‚Äî just your *@username* to receive the gift.\n\n"
        "*Payment methods:\n- Crypto (TON, BTC, USDC, BNB)\n- PayPal*\n\n"
        "*To buy: @headphony*",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Popypara"
@dp.message(F.text == "Popypara üáπüá∑")
async def handle_popypara(message: Message):
    await message.answer(
        "üáπüá∑ *Popypara*\n\n"
        "*Features:\n\n*"
        "‚ñ´Ô∏è Monthly limit of *2750 TRYüáπüá∑*\n\n"
        "‚ñ´Ô∏è Works with *all online services‚úÖ*\n\n"
        "‚ñ´Ô∏è *Quick & easy* top-up process‚úÖ\n\n"
        "‚ñ´Ô∏è *Stable & reliable* performanceü§ó\n\n"
        "‚ñ´Ô∏è Super *user-friendly* experience\n\n"
        "*Price:*\n\n"
        "*‚ö†Ô∏èCurrently anavailable! Check our news channel for the updates*\n\n"
        "Payment - Crypto, Paypal\n"
        "*Contact us - @headphony*",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message(F.text == "Back")
async def handle_back(message: Message):
    await message.answer("You are back to the main menu.", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Info about us"
@dp.message(F.text == "‚ÑπÔ∏è About Us")
async def handle_about(message: Message):
    await message.answer(
        "*Horda Shop. We don‚Äôt beg ‚Äî we deliver.*\n\n"
        "*Fast deals, clean setup, zero bullshit.*\n\n"
        "You came for the *price* ‚Äî you‚Äôll stay for the service üëä\n\n"
        "*Cheap? Yeah ü§©*\n"
        "*Shady? Nah üòé*\n\n"
        "*We move different...*",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Referral System"
@dp.message(F.text == "üéÅ Referral System")
async def handle_referral(message: Message):
    user_id = message.from_user.id
    referral_link = f"https://t.me/hordashop_bot?start={user_id}"
    await message.answer(
        f"*üéâ Referral System*\n\n"
        f"*Invite* your *friends* and earn *rewards!*\n"
        f"For every user who joins with your link, you‚Äôll receive:\n\n"
        f"‚Ä¢ *üîÅ 2% discount automatically just for the referral*\n\n"
        f"‚Ä¢ *üí∏ +10% if your referral makes a purchase*\n\n"
        f"*Your referral link: {referral_link}*",
    parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Help"
@dp.message(F.text == "üí¨ Help & Support")
async def handle_help(message: Message):
    await message.answer(
        "*Got any questions?*\n\n"
        "Feel free to reach out to us anytime:\n"
        "*üì© @headphony*",
       parse_mode="Markdown" 
       )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors()
async def handle_errors(update: Update, exception: Exception):
    logging.error(f"An error occurred: {exception}\nUpdate: {update}")
    return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —á—Ç–æ–±—ã –æ—à–∏–±–∫–∞ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–ª–∞ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_unhandled_messages(message: Message):
    await message.answer("There is no such command. Try again!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

logging.basicConfig(level=logging.DEBUG)

if __name__ == '__main__':
    asyncio.run(main())